// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool Integraph.Models.CodeGeneration 
//  
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using Integraph.Models.Ifc2x3.MeasureResource;
using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel;
using Integraph.Models.Common.Metadata;
using Integraph.Models.Common;
using Integraph.Models.Common.Exceptions;
using Integraph.Models.Ifc2x3.Interfaces;
using Integraph.Models.Ifc2x3.PresentationAppearanceResource;
//## Custom using statements
//##

namespace Integraph.Models.Ifc2x3.Interfaces
{
	/// <summary>
    /// Readonly interface for IfcSurfaceStyleRefraction
    /// </summary>
	// ReSharper disable once PartialTypeWithSinglePart
	public partial interface @IIfcSurfaceStyleRefraction : IPersistEntity, IfcSurfaceStyleElementSelect
	{
		IfcReal? @RefractionIndex { get;  set; }
		IfcReal? @DispersionFactor { get;  set; }
	
	}
}

namespace Integraph.Models.Ifc2x3.PresentationAppearanceResource
{
	[ExpressType("IfcSurfaceStyleRefraction", 636)]
	// ReSharper disable once PartialTypeWithSinglePart
	public  partial class @IfcSurfaceStyleRefraction : PersistEntity, IInstantiableEntity, IIfcSurfaceStyleRefraction, IEquatable<@IfcSurfaceStyleRefraction>
	{
		#region IIfcSurfaceStyleRefraction explicit implementation
		IfcReal? IIfcSurfaceStyleRefraction.RefractionIndex { 
 
			get { return @RefractionIndex; } 
			set { RefractionIndex = value;}
		}	
		IfcReal? IIfcSurfaceStyleRefraction.DispersionFactor { 
 
			get { return @DispersionFactor; } 
			set { DispersionFactor = value;}
		}	
		 
		#endregion

		//internal constructor makes sure that objects are not created outside of the model/ assembly controlled area
		internal IfcSurfaceStyleRefraction(IModel model, int label, bool activated) : base(model, label, activated)  
		{
		}

		#region Explicit attribute fields
		private IfcReal? _refractionIndex;
		private IfcReal? _dispersionFactor;
		#endregion
	
		#region Explicit attribute properties
		[EntityAttribute(1, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 1)]
		public IfcReal? @RefractionIndex 
		{ 
			get 
			{
				if(_activated) return _refractionIndex;
				Activate();
				return _refractionIndex;
			} 
			set
			{
				SetValue( v =>  _refractionIndex = v, _refractionIndex, value,  "RefractionIndex", 1);
			} 
		}	
		[EntityAttribute(2, EntityAttributeState.Optional, EntityAttributeType.None, EntityAttributeType.None, null, null, 2)]
		public IfcReal? @DispersionFactor 
		{ 
			get 
			{
				if(_activated) return _dispersionFactor;
				Activate();
				return _dispersionFactor;
			} 
			set
			{
				SetValue( v =>  _dispersionFactor = v, _dispersionFactor, value,  "DispersionFactor", 2);
			} 
		}	
		#endregion




		#region IPersist implementation
		public override void Parse(int propIndex, IPropertyValue value, int[] nestedIndex)
		{
			switch (propIndex)
			{
				case 0: 
					_refractionIndex = value.RealVal;
					return;
				case 1: 
					_dispersionFactor = value.RealVal;
					return;
				default:
					throw new XbimParserException(string.Format("Attribute index {0} is out of range for {1}", propIndex + 1, GetType().Name.ToUpper()));
			}
		}
		#endregion

		#region Equality comparers and operators
        public bool Equals(@IfcSurfaceStyleRefraction other)
	    {
	        return this == other;
	    }
        #endregion

		#region Custom code (will survive code regeneration)
		//## Custom code
		//##
		#endregion
	}
}